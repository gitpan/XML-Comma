.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XML::Comma::Pkg::Mason::ParResolver 3pm"
.TH XML::Comma::Pkg::Mason::ParResolver 3pm "2007-02-13" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
XML::Comma::Pkg::Mason::ParResolver \- Mason/Comma packages
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`XML::Comma::Pkg::Mason::ParResolver\*(C'\fR knows how to serve Mason
components, Comma defs and perl Modules from zipped archives.
.PP
A Comma package is a zip file with the following top-level directories:
.PP
.Vb 3
\&  F<comma/> \- Def (and macro and include) files
\&  F<mason/> \- Mason components
\&  F<lib/> \- Perl modules
.Ve
.PP
The amazing \f(CW\*(C`PAR\*(C'\fR module handles the loading of modules from the
\&\fIlib/\fR directory. If you haven't read the \s-1PAR\s0 documentation, it's
worth doing so. \s-1PAR\s0 does many interesting things, and we rely only on
a small corner of its functionality.
.PP
Comma knows how to load defs from \s-1PAR\s0 files. The Configuration
variable \f(CW\*(C`defs_from_PARs\*(C'\fR controls whether Comma attempts to load
defs from PARs that have been \f(CW\*(C`use\*(C'\fR'ed into use. That variable is
usually set to 0, so you may need to change it.
.PP
This module handles the \fImason/\fR component serving. Some Apache
configuration is necessary, but with that out of the way you can do
something like the following in a handler.pl file:
.PP
.Vb 6
\&  use PAR '/usr/local/apache/htdocs/par\-demo.par';
\&  use XML::Comma::Pkg::Mason::ParResolver
\&    par_paths => {
\&      '/par\-demo' => { par  => '/usr/local/apache/htdocs/par\-demo.par',
\&                       attr => { color1 => '#0000ff' } }
\&  };
.Ve
.PP
And the \fImason/\fR directory in
\&\fI/usr/local/apache/htdocs/par\-demo.par\fR will look as if it is part of
the component root, \*(L"aliased\*(R" to the path \fI/par\-demo\fR.
.PP
In addition, we've specified that any calls to
\&\f(CW\*(C`$m\-\*(C'\fRcurrent_comp\->attr('color1')> (or any of its friends) will
return the value '#0000ff', even if components inside the \s-1PAR\s0 file set
that attribute differently.
.PP
Finally, we can selectively shadow any component in the \s-1PAR\s0 file by
creating an actual \fI/par\-demo\fR directory and components therein. Each
time we attempt to resolve a component down any \s-1PAR\s0 alias path, we
first check to see if there is an \*(L"ordinary\*(R" component that we can
use.
.SH "DEMO/EXAMPLE"
.IX Header "DEMO/EXAMPLE"
There is a demo file, called \fIpar\-demo.par\fR, distributed with the
XML::Comma distribution in the same directory as this source file.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
\&\f(CW\*(C`XML::Comma::Pkg::Mason::ParResolver\*(C'\fR needs to handle several phases
of the Apache request. Mostly, it can set up to do this itself, but it
is necessary to manually specify a PerlTransHandler in your httpd.conf
(or equivalent). I use these two lines, in the top level of my conf
files:
.PP
.Vb 3
\&  # in httpd.conf
\&  PerlModule       XML::Comma::Pkg::Mason::ParResolver;
\&  PerlTransHandler XML::Comma::Pkg::Mason::ParResolver::trans_handler
.Ve
.PP
Then, in your \fIhandler.pl\fR, you'll need to \f(CW\*(C`use
XML::Comma::Pkg::Mason::ParResolver\*(C'\fR, supplying as arguments your \s-1PAR\s0
path information. (You can also supply a \f(CW\*(C`verbose =&gt; 1\*(C'\fR argument,
to have this module print out voluminous debugging info to the Apache
error log.)
.PP
Here is a simple handler.pl file that I often use on development servers:
.PP
.Vb 3
\&  #!/usr/bin/perl
\&  #
\&  # This is a basic handler.pl using XML::Comma::Pkg::Mason::ParResolver.
.Ve
.PP
.Vb 1
\&  package HTML::Mason;
.Ve
.PP
.Vb 2
\&  #
\&  # Sample Mason handler.
.Ve
.PP
.Vb 4
\&  use HTML::Mason;
\&  use HTML::Mason::ApacheHandler;
\&  use Apache::Constants qw(:common);
\&  use Apache:
.Ve
.PP
.Vb 1
\&  use strict;
.Ve
.PP
.Vb 3
\&  {
\&     package HTML::Mason::Commands;
\&     use vars qw( $auth );
.Ve
.PP
.Vb 3
\&     use Apache::Util;
\&     use XML::Comma;
\&  }
.Ve
.PP
.Vb 8
\&  use PAR '/usr/local/apache/htdocs/par\-demo.par';
\&  use XML::Comma::Pkg::Mason::ParResolver
\&    verbose   => 1,
\&    par_paths => {
\&      '/foo'      => '/usr/local/apache/htdocs/foo.par',
\&      '/par\-demo' => { par  => '/usr/local/apache/htdocs/par\-demo.par',
\&                       attr => { color1 => '#0000ff' } }
\&  };
.Ve
.PP
.Vb 7
\&  my $ah_show_error = HTML::Mason::ApacheHandler\->new
\&    (
\&     comp_root      => '/usr/local/apache/htdocs',
\&     resolver_class => 'XML::Comma::Pkg::Mason::ParResolver',
\&     data_dir       => '/usr/local/apache/mason_data',
\&     error_mode     => 'output',
\&    );
.Ve
.PP
.Vb 6
\&  sub handler {
\&    my ($r) = @_;
\&    my $status = $ah_show_error\->interp\->resolver
\&      \->simple_handle_request ( $r, $ah_show_error );
\&    return $status;
\&  }
.Ve
.PP
This should work for you too, once your comp_root and par_paths are
adjusted.
.SH "COMPLEXITIES"
.IX Header "COMPLEXITIES"
You may have noticed the \f(CW\*(C`simple_handle_request\*(C'\fR method, used in our
handler sub above. Here is the code for that method, in its entirety:
.PP
.Vb 2
\&  sub simple_handle_request {
\&    my ( $self, $r, $apache_handler ) = @_;
.Ve
.PP
.Vb 2
\&    return DECLINED  if  $r\->content_type  and
\&                         $r\->content_type =~ m|^httpd|;
.Ve
.PP
.Vb 8
\&    if ( $r\->content_type                 and
\&         $r\->content_type  !~  m|^text| ) {
\&      if ( $r\->pnotes('PAR') ) {
\&        return $self\->send_raw_file ( $r );
\&      } else {
\&        return DECLINED;
\&      }
\&    }
.Ve
.PP
.Vb 2
\&    return $apache_handler\->handle_request ( $r );
\&  }
.Ve
.PP
Many handler.pl setups have complex setups to determine whether (and
how) Mason should serve top-level requests. If you need to integrate a
ParResolver into such a setup, you'll need to code your own version of
the logic above.
.PP
It's important to avoid asking the ParResolver to handle \*(L"httpd/*\*(R"
content types. Apache uses some heavy wizardry under the covers to
make requests for directories to eventually turn into requests for
index.html files. (And along the way pick up missing trailing
slashes.) We're not going to be able to do this as well as Apache, so
we needs to get out of its way as much as possible.
.PP
It's also worth noting that \s-1PAR\s0 packages will often include binary
files that need to be served without the benefit of Mason
componentization. The \f(CW\*(C`simple_handle_request\*(C'\fR routine assumes that
all \*(L"text/*\*(R" content types are fair game for Mason, but that all other
content types will be sent byte-for-byte to the client. Your rules for
this may differ.
.PP
Components that are served from \s-1PAR\s0 archives belong to the class
\&\f(CW\*(C`XML::Comma::Pkg::Mason::ParComponent\*(C'\fR, which is a subclass of
\&\f(CW\*(C`HTML::Mason::Component::FileBased\*(C'\fR.
.SH "COPYRIGHT and LICENSE"
.IX Header "COPYRIGHT and LICENSE"
This code is copyright 2003 AllAfrica Global Media.
.PP
Like all of the XML::Comma distribution, it is free software; you can
redistribute it and/or modify it under the terms of the \s-1GNU\s0 General
Public License as published by the Free Software Foundation; either
version 2 of the License, or any later version.  
